// This file was generated by purescript-docs-search.
window.DocsSearchIndex["21"] = [["t7",[{"values":[{"sourceSpan":{"start":[41,1],"name":".spago/functors/master/src/Data/Functor/Product/Nested.purs","end":[41,51]},"score":0,"packageInfo":{"values":["functors"],"tag":"Package"},"name":"T7","moduleName":"Data.Functor.Product.Nested","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor","Product"],"Product"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor","Product","Nested"],"T6"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"c"}]},{"tag":"TypeVar","contents":"d"}]},{"tag":"TypeVar","contents":"e"}]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"z"}]}}]},"arguments":[["a",null],["b",null],["c",null],["d",null],["e",null],["f",null],["z",null]]}],"tag":"TypeSynonymResult"},"hashAnchor":"t","comments":null}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[90,1],"name":".spago/tuples/master/src/Data/Tuple/Nested.purs","end":[90,49]},"score":0,"packageInfo":{"values":["tuples"],"tag":"Package"},"name":"T7","moduleName":"Data.Tuple.Nested","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple","Nested"],"T6"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"c"}]},{"tag":"TypeVar","contents":"d"}]},{"tag":"TypeVar","contents":"e"}]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"z"}]}}]},"arguments":[["a",null],["b",null],["c",null],["d",null],["e",null],["f",null],["z",null]]}],"tag":"TypeSynonymResult"},"hashAnchor":"t","comments":null}],"tag":"SearchResult"}]],["on",[{"values":[{"sourceSpan":{"start":[112,1],"name":".spago/prelude/master/src/Data/Function.purs","end":[112,61]},"score":1,"packageInfo":{"values":["prelude"],"tag":"Package"},"name":"on","moduleName":"Data.Function","info":{"values":[{"type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["c",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"c"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"c"}]}]}]}]},null]},null]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"The `on` function is used to change the domain of a binary operator.\n\nFor example, we can create a function which compares two records based on the values of their `x` properties:\n\n```purescript\ncompareX :: forall r. { x :: Number | r } -> { x :: Number | r } -> Ordering\ncompareX = compare `on` _.x\n```\n"}],"tag":"SearchResult"}]],["one",[{"values":[{"sourceSpan":{"start":[38,3],"name":".spago/prelude/master/src/Data/Semiring.purs","end":[38,12]},"score":1,"packageInfo":{"values":["prelude"],"tag":"Package"},"name":"one","moduleName":"Data.Semiring","info":{"values":[{"typeClassArguments":[["a",null]],"typeClass":[["Data","Semiring"],"Semiring"],"type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Semiring"],"Semiring"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]},null]}}],"tag":"TypeClassMemberResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["oneof",[{"values":[{"sourceSpan":{"start":[286,1],"name":".spago/foldable-traversable/master/src/Data/Foldable.purs","end":[286,62]},"score":0,"packageInfo":{"values":["foldable-traversable"],"tag":"Package"},"name":"oneOf","moduleName":"Data.Foldable","info":{"values":[{"type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["g",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Foldable"],"Foldable"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}]},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Plus"],"Plus"],"constraintArgs":[{"tag":"TypeVar","contents":"g"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"g"},{"tag":"TypeVar","contents":"a"}]}}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"g"},{"tag":"TypeVar","contents":"a"}]}]}]}]},null]},null]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Combines a collection of elements using the `Alt` operation.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[104,1],"name":".spago/nonempty/master/src/Data/NonEmpty.purs","end":[104,58]},"score":0,"packageInfo":{"values":["nonempty"],"tag":"Package"},"name":"oneOf","moduleName":"Data.NonEmpty","info":{"values":[{"type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Alternative"],"Alternative"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","NonEmpty"],"NonEmpty"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]}]},null]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Returns the `alt` (`<|>`) result of:\n- The first element lifted to the container of the remaining elements.\n- The remaining elements.\n\n```purescript\nimport Data.Maybe(Maybe(..))\n\noneOf (1 :| Nothing) == Just 1\noneOf (1 :| Just 2) == Just 1\n\noneOf (1 :| [2, 3]) == [1,2,3]\n```\n"}],"tag":"SearchResult"}]],["oneofmap",[{"values":[{"sourceSpan":{"start":[290,1],"name":".spago/foldable-traversable/master/src/Data/Foldable.purs","end":[290,77]},"score":0,"packageInfo":{"values":["foldable-traversable"],"tag":"Package"},"name":"oneOfMap","moduleName":"Data.Foldable","info":{"values":[{"type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["g",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["b",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Foldable"],"Foldable"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}]},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Plus"],"Plus"],"constraintArgs":[{"tag":"TypeVar","contents":"g"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"g"},{"tag":"TypeVar","contents":"b"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"g"},{"tag":"TypeVar","contents":"b"}]}]}]}]}]},null]},null]},null]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Folds a structure into some `Plus`.\n"}],"tag":"SearchResult"}]],["onerecord",[{"values":[{"sourceSpan":{"start":[102,3],"name":".spago/prelude/master/src/Data/Semiring.purs","end":[102,85]},"score":1,"packageInfo":{"values":["prelude"],"tag":"Package"},"name":"oneRecord","moduleName":"Data.Semiring","info":{"values":[{"typeClassArguments":[["rowlist",null],["row",null],["subrow",null]],"typeClass":[["Data","Semiring"],"SemiringRecord"],"type":{"tag":"ForAll","contents":["rowlist",{"tag":"ForAll","contents":["row",{"tag":"ForAll","contents":["subrow",{"tag":"ForAll","contents":["rproxy",{"tag":"ForAll","contents":["rlproxy",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Semiring"],"SemiringRecord"],"constraintArgs":[{"tag":"TypeVar","contents":"rowlist"},{"tag":"TypeVar","contents":"row"},{"tag":"TypeVar","contents":"subrow"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"rlproxy"},{"tag":"TypeVar","contents":"rowlist"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"rproxy"},{"tag":"TypeVar","contents":"row"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"tag":"TypeVar","contents":"subrow"}]}]}]}]},null]},null]},null]},null]},null]}}],"tag":"TypeClassMemberResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["noarguments",[{"values":[{"sourceSpan":{"start":[23,1],"name":".spago/prelude/master/src/Data/Generic/Rep.purs","end":[23,31]},"score":1,"packageInfo":{"values":["prelude"],"tag":"Package"},"name":"NoArguments","moduleName":"Data.Generic.Rep","info":{"values":[{"typeArguments":[],"dataDeclType":"data"}],"tag":"DataResult"},"hashAnchor":"t","comments":"A representation for constructors with no arguments.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":null,"score":1,"packageInfo":{"values":["prelude"],"tag":"Package"},"name":"NoArguments","moduleName":"Data.Generic.Rep","info":{"values":[{"arguments":[]}],"tag":"DataConstructorResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["noconstructors",[{"values":[{"sourceSpan":{"start":[20,1],"name":".spago/prelude/master/src/Data/Generic/Rep.purs","end":[20,20]},"score":1,"packageInfo":{"values":["prelude"],"tag":"Package"},"name":"NoConstructors","moduleName":"Data.Generic.Rep","info":{"values":[{"typeArguments":[],"dataDeclType":"data"}],"tag":"DataResult"},"hashAnchor":"t","comments":"A representation for types with no constructors.\n"}],"tag":"SearchResult"}]],["none",[{"values":[{"sourceSpan":{"start":[93,1],"name":".spago/unfoldable/master/src/Data/Unfoldable.purs","end":[93,40]},"score":0,"packageInfo":{"values":["unfoldable"],"tag":"Package"},"name":"none","moduleName":"Data.Unfoldable","info":{"values":[{"type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Unfoldable"],"Unfoldable"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},null]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"The container with no elements - unfolded with zero iterations.\nFor example:\n\n``` purescript\nnone == ([] :: Array Unit)\n```\n"}],"tag":"SearchResult"}]],["nonempty",[{"values":[{"sourceSpan":{"start":[47,1],"name":".spago/nonempty/master/src/Data/NonEmpty.purs","end":[47,37]},"score":0,"packageInfo":{"values":["nonempty"],"tag":"Package"},"name":"NonEmpty","moduleName":"Data.NonEmpty","info":{"values":[{"typeArguments":[["f",null],["a",null]],"dataDeclType":"data"}],"tag":"DataResult"},"hashAnchor":"t","comments":"A non-empty container of elements of type a.\n\n```purescript\nimport Data.NonEmpty\n\nnonEmptyArray :: NonEmpty Array Int\nnonEmptyArray = NonEmpty 1 [2,3]\n\nimport Data.List(List(..), (:))\n\nnonEmptyList :: NonEmpty List Int\nnonEmptyList = NonEmpty 1 (2 : 3 : Nil)\n```\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":null,"score":0,"packageInfo":{"values":["nonempty"],"tag":"Package"},"name":"NonEmpty","moduleName":"Data.NonEmpty","info":{"values":[{"arguments":[{"tag":"TypeVar","contents":"a"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}}]}],"tag":"DataConstructorResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["nonemptyarray",[{"values":[{"sourceSpan":{"start":[31,1],"name":".spago/arrays/master/src/Data/Array/NonEmpty/Internal.purs","end":[31,50]},"score":0,"packageInfo":{"values":["arrays"],"tag":"Package"},"name":"NonEmptyArray","moduleName":"Data.Array.NonEmpty.Internal","info":{"values":[{"typeArguments":[["a",null]],"dataDeclType":"newtype"}],"tag":"DataResult"},"hashAnchor":"t","comments":"An array that is known not to be empty.\n\nYou can use the constructor to create a `NonEmptyArray` that isn't\nnon-empty, breaking the guarantee behind this newtype. It is\nprovided as an escape hatch mainly for the `Data.Array.NonEmpty`\nand `Data.Array` modules. Use this at your own risk when you know\nwhat you are doing.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":null,"score":0,"packageInfo":{"values":["arrays"],"tag":"Package"},"name":"NonEmptyArray","moduleName":"Data.Array.NonEmpty.Internal","info":{"values":[{"arguments":[{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}}]}],"tag":"DataConstructorResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["not",[{"values":[{"sourceSpan":{"start":[44,3],"name":".spago/prelude/master/src/Data/HeytingAlgebra.purs","end":[44,16]},"score":1,"packageInfo":{"values":["prelude"],"tag":"Package"},"name":"not","moduleName":"Data.HeytingAlgebra","info":{"values":[{"typeClassArguments":[["a",null]],"typeClass":[["Data","HeytingAlgebra"],"HeytingAlgebra"],"type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","HeytingAlgebra"],"HeytingAlgebra"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]},null]}}],"tag":"TypeClassMemberResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["note",[{"values":[{"sourceSpan":{"start":[263,1],"name":".spago/either/master/src/Data/Either.purs","end":[263,47]},"score":0,"packageInfo":{"values":["either"],"tag":"Package"},"name":"note","moduleName":"Data.Either","info":{"values":[{"type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["b",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]}]},null]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Takes a default and a `Maybe` value, if the value is a `Just`, turn it into\na `Right`, if the value is a `Nothing` use the provided default as a `Left`\n\n```purescript\nnote \"default\" Nothing = Left \"default\"\nnote \"default\" (Just 1) = Right 1\n```\n"}],"tag":"SearchResult"}]],["note'",[{"values":[{"sourceSpan":{"start":[273,1],"name":".spago/either/master/src/Data/Either.purs","end":[273,58]},"score":0,"packageInfo":{"values":["either"],"tag":"Package"},"name":"note'","moduleName":"Data.Either","info":{"values":[{"type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["b",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]},{"tag":"TypeVar","contents":"a"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]}]},null]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Similar to `note`, but for use in cases where the default value may be\nexpensive to compute.\n\n```purescript\nnote' (\\_ -> \"default\") Nothing = Left \"default\"\nnote' (\\_ -> \"default\") (Just 1) = Right 1\n```\n"}],"tag":"SearchResult"}]],["notelem",[{"values":[{"sourceSpan":{"start":[267,1],"name":".spago/arrays/master/src/Data/Array/NonEmpty.purs","end":[267,61]},"score":0,"packageInfo":{"values":["arrays"],"tag":"Package"},"name":"notElem","moduleName":"Data.Array.NonEmpty","info":{"values":[{"type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Eq"],"Eq"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Array","NonEmpty","Internal"],"NonEmptyArray"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[421,1],"name":".spago/arrays/master/src/Data/Array.purs","end":[421,53]},"score":0,"packageInfo":{"values":["arrays"],"tag":"Package"},"name":"notElem","moduleName":"Data.Array","info":{"values":[{"type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Eq"],"Eq"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Returns true if the array does not have the given element.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[390,1],"name":".spago/foldable-traversable/master/src/Data/Foldable.purs","end":[390,65]},"score":0,"packageInfo":{"values":["foldable-traversable"],"tag":"Package"},"name":"notElem","moduleName":"Data.Foldable","info":{"values":[{"type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Foldable"],"Foldable"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}]},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Eq"],"Eq"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}]}]},null]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Test whether a value is not an element of a data structure.\n"}],"tag":"SearchResult"}]],["noteq",[{"values":[{"sourceSpan":{"start":[35,1],"name":".spago/prelude/master/src/Data/Eq.purs","end":[35,45]},"score":1,"packageInfo":{"values":["prelude"],"tag":"Package"},"name":"notEq","moduleName":"Data.Eq","info":{"values":[{"type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Eq"],"Eq"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"`notEq` tests whether one value is _not equal_ to another. Shorthand for\n`not (eq x y)`.\n"}],"tag":"SearchResult"}]],["noteq1",[{"values":[{"sourceSpan":{"start":[91,1],"name":".spago/prelude/master/src/Data/Eq.purs","end":[91,61]},"score":1,"packageInfo":{"values":["prelude"],"tag":"Package"},"name":"notEq1","moduleName":"Data.Eq","info":{"values":[{"type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Eq"],"Eq1"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}]},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Eq"],"Eq"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}]}]},null]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["nothing",[{"values":[{"sourceSpan":null,"score":0,"packageInfo":{"values":["maybe"],"tag":"Package"},"name":"Nothing","moduleName":"Data.Maybe","info":{"values":[{"arguments":[]}],"tag":"DataConstructorResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["notrecord",[{"values":[{"sourceSpan":{"start":[118,3],"name":".spago/prelude/master/src/Data/HeytingAlgebra.purs","end":[118,78]},"score":1,"packageInfo":{"values":["prelude"],"tag":"Package"},"name":"notRecord","moduleName":"Data.HeytingAlgebra","info":{"values":[{"typeClassArguments":[["rowlist",null],["row",null],["subrow",null]],"typeClass":[["Data","HeytingAlgebra"],"HeytingAlgebraRecord"],"type":{"tag":"ForAll","contents":["rowlist",{"tag":"ForAll","contents":["row",{"tag":"ForAll","contents":["subrow",{"tag":"ForAll","contents":["rlproxy",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","HeytingAlgebra"],"HeytingAlgebraRecord"],"constraintArgs":[{"tag":"TypeVar","contents":"rowlist"},{"tag":"TypeVar","contents":"row"},{"tag":"TypeVar","contents":"subrow"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"rlproxy"},{"tag":"TypeVar","contents":"rowlist"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"tag":"TypeVar","contents":"row"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"tag":"TypeVar","contents":"subrow"}]}]}]}]},null]},null]},null]},null]}}],"tag":"TypeClassMemberResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["iterate",[{"values":[{"sourceSpan":{"start":[37,1],"name":".spago/arrays/master/src/Data/Array/ST/Iterator.purs","end":[37,69]},"score":0,"packageInfo":{"values":["arrays"],"tag":"Package"},"name":"iterate","moduleName":"Data.Array.ST.Iterator","info":{"values":[{"type":{"tag":"ForAll","contents":["r",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Array","ST","Iterator"],"Iterator"]},{"tag":"TypeVar","contents":"r"}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","ST","Internal"],"ST"]},{"tag":"TypeVar","contents":"r"}]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","ST","Internal"],"ST"]},{"tag":"TypeVar","contents":"r"}]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}]},null]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Perform an action once for each item left in an iterator. If the action\nitself also advances the same iterator, `iterate` will miss those items\nout.\n"}],"tag":"SearchResult"}]],["iterator",[{"values":[{"sourceSpan":{"start":[25,1],"name":".spago/arrays/master/src/Data/Array/ST/Iterator.purs","end":[25,60]},"score":0,"packageInfo":{"values":["arrays"],"tag":"Package"},"name":"Iterator","moduleName":"Data.Array.ST.Iterator","info":{"values":[{"typeArguments":[["r",null],["a",null]],"dataDeclType":"data"}],"tag":"DataResult"},"hashAnchor":"t","comments":"This type provides a slightly easier way of iterating over an array's\nelements in an STArray computation, without having to keep track of\nindices.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[30,1],"name":".spago/arrays/master/src/Data/Array/ST/Iterator.purs","end":[30,64]},"score":0,"packageInfo":{"values":["arrays"],"tag":"Package"},"name":"iterator","moduleName":"Data.Array.ST.Iterator","info":{"values":[{"type":{"tag":"ForAll","contents":["r",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","ST","Internal"],"ST"]},{"tag":"TypeVar","contents":"r"}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Array","ST","Iterator"],"Iterator"]},{"tag":"TypeVar","contents":"r"}]},{"tag":"TypeVar","contents":"a"}]}}]}]},null]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Make an Iterator given an indexing function into an array (or anything\nelse). If `xs :: Array a`, the standard way to create an iterator over\n`xs` is to use `iterator (xs !! _)`, where `(!!)` comes from `Data.Array`.\n"}],"tag":"SearchResult"}]],["hush",[{"values":[{"sourceSpan":{"start":[283,1],"name":".spago/either/master/src/Data/Either.purs","end":[283,42]},"score":0,"packageInfo":{"values":["either"],"tag":"Package"},"name":"hush","moduleName":"Data.Either","info":{"values":[{"type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["b",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"b"}]}]},null]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Turns an `Either` into a `Maybe`, by throwing eventual `Left` values away and converting\nthem into `Nothing`. `Right` values get turned into `Just`s.\n\n```purescript\nhush (Left \"ParseError\") = Nothing\nhush (Right 42) = Just 42\n```\n"}],"tag":"SearchResult"}]],["exhausted",[{"values":[{"sourceSpan":{"start":[61,1],"name":".spago/arrays/master/src/Data/Array/ST/Iterator.purs","end":[61,54]},"score":0,"packageInfo":{"values":["arrays"],"tag":"Package"},"name":"exhausted","moduleName":"Data.Array.ST.Iterator","info":{"values":[{"type":{"tag":"ForAll","contents":["r",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Array","ST","Iterator"],"Iterator"]},{"tag":"TypeVar","contents":"r"}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","ST","Internal"],"ST"]},{"tag":"TypeVar","contents":"r"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]},null]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Check whether an iterator has been exhausted.\n"}],"tag":"SearchResult"}]],["exists",[{"values":[{"sourceSpan":{"start":[27,1],"name":".spago/exists/master/src/Data/Exists.purs","end":[27,60]},"score":0,"packageInfo":{"values":["exists"],"tag":"Package"},"name":"Exists","moduleName":"Data.Exists","info":{"values":[{"kind":{"tag":"ForAll","contents":["k",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"k"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Type"]}]}}]},{"tag":"TypeConstructor","contents":[["Prim"],"Type"]}]},null]}}],"tag":"ExternDataResult"},"hashAnchor":"t","comments":"This type constructor can be used to existentially quantify over a type.\n\nSpecifically, the type `Exists f` is isomorphic to the existential type `exists a. f a`.\n\nExistential types can be encoded using universal types (`forall`) for endofunctors in more general\ncategories. The benefit of this library is that, by using the FFI, we can create an efficient\nrepresentation of the existential by simply hiding type information.\n\nFor example, consider the type `exists s. Tuple s (s -> Tuple s a)` which represents infinite streams\nof elements of type `a`.\n\nThis type can be constructed by creating a type constructor `StreamF` as follows:\n\n```purescript\ndata StreamF a s = StreamF s (s -> Tuple s a)\n```\n\nWe can then define the type of streams using `Exists`:\n\n```purescript\ntype Stream a = Exists (StreamF a)\n```\n"}],"tag":"SearchResult"}]],["extend",[{"values":[{"sourceSpan":{"start":[24,1],"name":".spago/control/master/src/Control/Extend.purs","end":[25,49]},"score":1,"packageInfo":{"values":["control"],"tag":"Package"},"name":"Extend","moduleName":"Control.Extend","info":{"values":[{"superclasses":[{"constraintClass":[["Data","Functor"],"Functor"],"constraintArgs":[{"tag":"TypeVar","contents":"w"}]}],"fundeps":[],"arguments":[["w",null]]}],"tag":"TypeClassResult"},"hashAnchor":"t","comments":"The `Extend` class defines the extension operator `(<<=)`\nwhich extends a local context-dependent computation to\na global computation.\n\n`Extend` is the dual of `Bind`, and `(<<=)` is the dual of\n`(>>=)`.\n\nLaws:\n\n- Associativity: `extend f <<< extend g = extend (f <<< extend g)`\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[25,3],"name":".spago/control/master/src/Control/Extend.purs","end":[25,49]},"score":1,"packageInfo":{"values":["control"],"tag":"Package"},"name":"extend","moduleName":"Control.Extend","info":{"values":[{"typeClassArguments":[["w",null]],"typeClass":[["Control","Extend"],"Extend"],"type":{"tag":"ForAll","contents":["w",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["b",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Extend"],"Extend"],"constraintArgs":[{"tag":"TypeVar","contents":"w"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"w"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"b"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"w"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"w"},{"tag":"TypeVar","contents":"b"}]}]}]}]},null]},null]},null]}}],"tag":"TypeClassMemberResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["extendflipped",[{"values":[{"sourceSpan":{"start":[38,1],"name":".spago/control/master/src/Control/Extend.purs","end":[38,68]},"score":1,"packageInfo":{"values":["control"],"tag":"Package"},"name":"extendFlipped","moduleName":"Control.Extend","info":{"values":[{"type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["w",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Extend"],"Extend"],"constraintArgs":[{"tag":"TypeVar","contents":"w"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"w"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"w"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"b"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"w"},{"tag":"TypeVar","contents":"b"}]}]}]}]},null]},null]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"A version of `extend` with its arguments flipped.\n"}],"tag":"SearchResult"}]],["extract",[{"values":[{"sourceSpan":{"start":[21,3],"name":".spago/control/master/src/Control/Comonad.purs","end":[21,32]},"score":1,"packageInfo":{"values":["control"],"tag":"Package"},"name":"extract","moduleName":"Control.Comonad","info":{"values":[{"typeClassArguments":[["w",null]],"typeClass":[["Control","Comonad"],"Comonad"],"type":{"tag":"ForAll","contents":["w",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Comonad"],"Comonad"],"constraintArgs":[{"tag":"TypeVar","contents":"w"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"w"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"a"}]}]},null]},null]}}],"tag":"TypeClassMemberResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["=<<",[{"values":[{"sourceSpan":{"start":[63,1],"name":".spago/prelude/master/src/Control/Bind.purs","end":[63,28]},"score":1,"packageInfo":{"values":["prelude"],"tag":"Package"},"name":"(=<<)","moduleName":"Control.Bind","info":{"values":[],"tag":"ValueAliasResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["=<=",[{"values":[{"sourceSpan":{"start":[53,1],"name":".spago/control/master/src/Control/Extend.purs","end":[53,40]},"score":1,"packageInfo":{"values":["control"],"tag":"Package"},"name":"(=<=)","moduleName":"Control.Extend","info":{"values":[],"tag":"ValueAliasResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["<=",[{"values":[{"sourceSpan":{"start":[155,1],"name":".spago/prelude/master/src/Data/Ord.purs","end":[155,28]},"score":1,"packageInfo":{"values":["prelude"],"tag":"Package"},"name":"(<=)","moduleName":"Data.Ord","info":{"values":[],"tag":"ValueAliasResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["<=<",[{"values":[{"sourceSpan":{"start":[138,1],"name":".spago/prelude/master/src/Control/Bind.purs","end":[138,38]},"score":1,"packageInfo":{"values":["prelude"],"tag":"Package"},"name":"(<=<)","moduleName":"Control.Bind","info":{"values":[],"tag":"ValueAliasResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]]]