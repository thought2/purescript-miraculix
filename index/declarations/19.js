// This file was generated by purescript-docs-search.
window.DocsSearchIndex["19"] = [["t5",[{"values":[{"sourceSpan":{"start":[37,1],"name":".spago/functors/master/src/Data/Functor/Product/Nested.purs","end":[37,43]},"score":0,"packageInfo":{"values":["functors"],"tag":"Package"},"name":"T5","moduleName":"Data.Functor.Product.Nested","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor","Product"],"Product"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor","Product","Nested"],"T4"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"c"}]},{"tag":"TypeVar","contents":"d"}]},{"tag":"TypeVar","contents":"z"}]}}]},"arguments":[["a",null],["b",null],["c",null],["d",null],["z",null]]}],"tag":"TypeSynonymResult"},"hashAnchor":"t","comments":null}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[88,1],"name":".spago/tuples/master/src/Data/Tuple/Nested.purs","end":[88,41]},"score":0,"packageInfo":{"values":["tuples"],"tag":"Package"},"name":"T5","moduleName":"Data.Tuple.Nested","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple","Nested"],"T4"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"c"}]},{"tag":"TypeVar","contents":"d"}]},{"tag":"TypeVar","contents":"z"}]}}]},"arguments":[["a",null],["b",null],["c",null],["d",null],["z",null]]}],"tag":"TypeSynonymResult"},"hashAnchor":"t","comments":null}],"tag":"SearchResult"}]],["shift",[{"values":[{"sourceSpan":{"start":[95,1],"name":".spago/arrays/master/src/Data/Array/ST.purs","end":[95,51]},"score":0,"packageInfo":{"values":["arrays"],"tag":"Package"},"name":"shift","moduleName":"Data.Array.ST","info":{"values":[{"type":{"tag":"ForAll","contents":["h",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Array","ST"],"STArray"]},{"tag":"TypeVar","contents":"h"}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","ST","Internal"],"ST"]},{"tag":"TypeVar","contents":"h"}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}}]}]},null]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Remove the first element from an array and return that element.\n"}],"tag":"SearchResult"}]],["show",[{"values":[{"sourceSpan":{"start":[17,1],"name":".spago/prelude/master/src/Data/Show.purs","end":[18,22]},"score":1,"packageInfo":{"values":["prelude"],"tag":"Package"},"name":"Show","moduleName":"Data.Show","info":{"values":[{"superclasses":[],"fundeps":[],"arguments":[["a",null]]}],"tag":"TypeClassResult"},"hashAnchor":"t","comments":"The `Show` type class represents those types which can be converted into\na human-readable `String` representation.\n\nWhile not required, it is recommended that for any expression `x`, the\nstring `show x` be executable PureScript code which evaluates to the same\nvalue as the expression `x`.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[18,3],"name":".spago/prelude/master/src/Data/Show.purs","end":[18,22]},"score":1,"packageInfo":{"values":["prelude"],"tag":"Package"},"name":"show","moduleName":"Data.Show","info":{"values":[{"typeClassArguments":[["a",null]],"typeClass":[["Data","Show"],"Show"],"type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Show"],"Show"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}]},null]}}],"tag":"TypeClassMemberResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["showrecordfields",[{"values":[{"sourceSpan":{"start":[56,1],"name":".spago/prelude/master/src/Data/Show.purs","end":[57,84]},"score":1,"packageInfo":{"values":["prelude"],"tag":"Package"},"name":"ShowRecordFields","moduleName":"Data.Show","info":{"values":[{"superclasses":[],"fundeps":[],"arguments":[["rowlist",null],["row",null]]}],"tag":"TypeClassResult"},"hashAnchor":"t","comments":"A class for records where all fields have `Show` instances, used to\nimplement the `Show` instance for records.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[57,3],"name":".spago/prelude/master/src/Data/Show.purs","end":[57,84]},"score":1,"packageInfo":{"values":["prelude"],"tag":"Package"},"name":"showRecordFields","moduleName":"Data.Show","info":{"values":[{"typeClassArguments":[["rowlist",null],["row",null]],"typeClass":[["Data","Show"],"ShowRecordFields"],"type":{"tag":"ForAll","contents":["rowlist",{"tag":"ForAll","contents":["row",{"tag":"ForAll","contents":["rlproxy",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Show"],"ShowRecordFields"],"constraintArgs":[{"tag":"TypeVar","contents":"rowlist"},{"tag":"TypeVar","contents":"row"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"rlproxy"},{"tag":"TypeVar","contents":"rowlist"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"tag":"TypeVar","contents":"row"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}]}]}]},null]},null]},null]}}],"tag":"TypeClassMemberResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["right",[{"values":[{"sourceSpan":null,"score":0,"packageInfo":{"values":["either"],"tag":"Package"},"name":"Right","moduleName":"Data.Either","info":{"values":[{"arguments":[{"tag":"TypeVar","contents":"b"}]}],"tag":"DataConstructorResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[22,1],"name":".spago/functors/master/src/Data/Functor/Coproduct.purs","end":[22,46]},"score":0,"packageInfo":{"values":["functors"],"tag":"Package"},"name":"right","moduleName":"Data.Functor.Coproduct","info":{"values":[{"type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["g",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"g"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor","Coproduct"],"Coproduct"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"g"}]},{"tag":"TypeVar","contents":"a"}]}]},null]},null]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Right injection\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[30,3],"name":".spago/profunctor/master/src/Data/Profunctor/Choice.purs","end":[30,62]},"score":0,"packageInfo":{"values":["profunctor"],"tag":"Package"},"name":"right","moduleName":"Data.Profunctor.Choice","info":{"values":[{"typeClassArguments":[["p",null]],"typeClass":[["Data","Profunctor","Choice"],"Choice"],"type":{"tag":"ForAll","contents":["p",{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Profunctor","Choice"],"Choice"],"constraintArgs":[{"tag":"TypeVar","contents":"p"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"p"},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"c"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"p"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"c"}]}}]}]}]},null]},null]},null]},null]}}],"tag":"TypeClassMemberResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["rightdiv",[{"values":[{"sourceSpan":{"start":[51,1],"name":".spago/prelude/master/src/Data/DivisionRing.purs","end":[51,52]},"score":1,"packageInfo":{"values":["prelude"],"tag":"Package"},"name":"rightDiv","moduleName":"Data.DivisionRing","info":{"values":[{"type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","DivisionRing"],"DivisionRing"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Right division, defined as `rightDiv a b = a * recip b`. Left and right\ndivision are distinct in this module because a `DivisionRing` is not\nnecessarily commutative.\n\nIf the type `a` is also a `EuclideanRing`, then this function is\nequivalent to `div` from the `EuclideanRing` class. When working\nabstractly, `div` should generally be preferred, unless you know that you\nneed your code to work with noncommutative rings.\n"}],"tag":"SearchResult"}]],["ring",[{"values":[{"sourceSpan":{"start":[23,1],"name":".spago/prelude/master/src/Data/Ring.purs","end":[24,21]},"score":1,"packageInfo":{"values":["prelude"],"tag":"Package"},"name":"Ring","moduleName":"Data.Ring","info":{"values":[{"superclasses":[{"constraintClass":[["Data","Semiring"],"Semiring"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}]}],"fundeps":[],"arguments":[["a",null]]}],"tag":"TypeClassResult"},"hashAnchor":"t","comments":"The `Ring` class is for types that support addition, multiplication,\nand subtraction operations.\n\nInstances must satisfy the following laws in addition to the `Semiring`\nlaws:\n\n- Additive inverse: `a - a = zero`\n- Compatibility of `sub` and `negate`: `a - b = a + (zero - b)`\n"}],"tag":"SearchResult"}]],["ringrecord",[{"values":[{"sourceSpan":{"start":[62,1],"name":".spago/prelude/master/src/Data/Ring.purs","end":[63,92]},"score":1,"packageInfo":{"values":["prelude"],"tag":"Package"},"name":"RingRecord","moduleName":"Data.Ring","info":{"values":[{"superclasses":[{"constraintClass":[["Data","Semiring"],"SemiringRecord"],"constraintArgs":[{"tag":"TypeVar","contents":"rowlist"},{"tag":"TypeVar","contents":"row"},{"tag":"TypeVar","contents":"subrow"}]}],"fundeps":[[["rowlist"],["subrow"]]],"arguments":[["rowlist",null],["row",null],["subrow",null]]}],"tag":"TypeClassResult"},"hashAnchor":"t","comments":"A class for records where all fields have `Ring` instances, used to\nimplement the `Ring` instance for records.\n"}],"tag":"SearchResult"}]],["lookup",[{"values":[{"sourceSpan":{"start":[470,1],"name":".spago/foldable-traversable/master/src/Data/Foldable.purs","end":[470,76]},"score":0,"packageInfo":{"values":["foldable-traversable"],"tag":"Package"},"name":"lookup","moduleName":"Data.Foldable","info":{"values":[{"type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Foldable"],"Foldable"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}]},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Eq"],"Eq"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"b"}]}]}]}]}]},null]},null]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Lookup a value in a data structure of `Tuple`s, generalizing association lists.\n"}],"tag":"SearchResult"}]],["lose",[{"values":[{"sourceSpan":{"start":[14,3],"name":".spago/contravariant/master/src/Data/Decidable.purs","end":[14,39]},"score":0,"packageInfo":{"values":["contravariant"],"tag":"Package"},"name":"lose","moduleName":"Data.Decidable","info":{"values":[{"typeClassArguments":[["f",null]],"typeClass":[["Data","Decidable"],"Decidable"],"type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Decidable"],"Decidable"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Data","Void"],"Void"]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]}]},null]},null]}}],"tag":"TypeClassMemberResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["lost",[{"values":[{"sourceSpan":{"start":[28,1],"name":".spago/contravariant/master/src/Data/Decidable.purs","end":[28,40]},"score":0,"packageInfo":{"values":["contravariant"],"tag":"Package"},"name":"lost","moduleName":"Data.Decidable","info":{"values":[{"type":{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Decidable"],"Decidable"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeConstructor","contents":[["Data","Void"],"Void"]}]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["lowersplit",[{"values":[{"sourceSpan":{"start":[35,1],"name":".spago/profunctor/master/src/Data/Profunctor/Split.purs","end":[35,60]},"score":0,"packageInfo":{"values":["profunctor"],"tag":"Package"},"name":"lowerSplit","moduleName":"Data.Profunctor.Split","info":{"values":[{"type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Functor","Invariant"],"Invariant"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Profunctor","Split"],"Split"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]}]},null]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["gt",[{"values":[{"sourceSpan":null,"score":1,"packageInfo":{"values":["prelude"],"tag":"Package"},"name":"GT","moduleName":"Data.Ordering","info":{"values":[{"arguments":[]}],"tag":"DataConstructorResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"},{"values":[{"sourceSpan":null,"score":0,"packageInfo":{"values":[],"tag":"Builtin"},"name":"GT","moduleName":"Prim.Ordering","info":{"values":[{"kind":{"tag":"TypeConstructor","contents":[["Prim","Ordering"],"Ordering"]}}],"tag":"ExternDataResult"},"hashAnchor":"t","comments":"The 'greater than' ordering type.\n"}],"tag":"SearchResult"}]],["function",[{"values":[{"sourceSpan":null,"score":0,"packageInfo":{"values":[],"tag":"Builtin"},"name":"Function","moduleName":"Prim","info":{"values":[{"kind":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Type"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Type"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Type"]}]}]}}],"tag":"ExternDataResult"},"hashAnchor":"t","comments":"A function, which takes values of the type specified by the first type\nparameter, and returns values of the type specified by the second.\nIn the JavaScript backend, this is a standard JavaScript Function.\n\nThe type constructor `(->)` is syntactic sugar for this type constructor.\nIt is recommended to use `(->)` rather than `Function`, where possible.\n\nThat is, prefer this:\n\n    f :: Number -> Number\n\nto either of these:\n\n    f :: Function Number Number\n    f :: (->) Number Number\n"}],"tag":"SearchResult"}]],["functor",[{"values":[{"sourceSpan":{"start":[25,1],"name":".spago/prelude/master/src/Data/Functor.purs","end":[26,44]},"score":1,"packageInfo":{"values":["prelude"],"tag":"Package"},"name":"Functor","moduleName":"Data.Functor","info":{"values":[{"superclasses":[],"fundeps":[],"arguments":[["f",null]]}],"tag":"TypeClassResult"},"hashAnchor":"t","comments":"A `Functor` is a type constructor which supports a mapping operation\n`map`.\n\n`map` can be used to turn functions `a -> b` into functions\n`f a -> f b` whose argument and return types use the type constructor `f`\nto represent some computational context.\n\nInstances must satisfy the following laws:\n\n- Identity: `map identity = identity`\n- Composition: `map (f <<< g) = map f <<< map g`\n"}],"tag":"SearchResult"}]],["functorwithindex",[{"values":[{"sourceSpan":{"start":[35,1],"name":".spago/foldable-traversable/master/src/Data/FunctorWithIndex.purs","end":[36,58]},"score":0,"packageInfo":{"values":["foldable-traversable"],"tag":"Package"},"name":"FunctorWithIndex","moduleName":"Data.FunctorWithIndex","info":{"values":[{"superclasses":[{"constraintClass":[["Data","Functor"],"Functor"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}]}],"fundeps":[[["f"],["i"]]],"arguments":[["i",null],["f",null]]}],"tag":"TypeClassResult"},"hashAnchor":"t","comments":"A `Functor` with an additional index.\nInstances must satisfy a modified form of the `Functor` laws\n```purescript\nmapWithIndex (\\_ a -> a) = identity\nmapWithIndex f . mapWithIndex g = mapWithIndex (\\i -> f i <<< g i)\n```\nand be compatible with the `Functor` instance\n```purescript\nmap f = mapWithIndex (const f)\n```\n"}],"tag":"SearchResult"}]]]