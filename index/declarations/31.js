// This file was generated by purescript-docs-search.
window.DocsSearchIndex["31"] = [["star",[{"values":[{"sourceSpan":{"start":[25,1],"name":".spago/profunctor/master/src/Data/Profunctor/Star.purs","end":[25,37]},"score":0,"packageInfo":{"values":["profunctor"],"tag":"Package"},"name":"Star","moduleName":"Data.Profunctor.Star","info":{"values":[{"typeArguments":[["f",null],["a",null],["b",null]],"dataDeclType":"newtype"}],"tag":"DataResult"},"hashAnchor":"t","comments":"`Star` turns a `Functor` into a `Profunctor`.\n\n`Star f` is also the Kleisli category for `f`\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":null,"score":0,"packageInfo":{"values":["profunctor"],"tag":"Package"},"name":"Star","moduleName":"Data.Profunctor.Star","info":{"values":[{"arguments":[{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"b"}]}]}}]}],"tag":"DataConstructorResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["statel",[{"values":[{"sourceSpan":{"start":[11,1],"name":".spago/foldable-traversable/master/src/Data/Traversable/Accum/Internal.purs","end":[11,45]},"score":0,"packageInfo":{"values":["foldable-traversable"],"tag":"Package"},"name":"StateL","moduleName":"Data.Traversable.Accum.Internal","info":{"values":[{"typeArguments":[["s",null],["a",null]],"dataDeclType":"newtype"}],"tag":"DataResult"},"hashAnchor":"t","comments":null}],"tag":"SearchResult"},{"values":[{"sourceSpan":null,"score":0,"packageInfo":{"values":["foldable-traversable"],"tag":"Package"},"name":"StateL","moduleName":"Data.Traversable.Accum.Internal","info":{"values":[{"arguments":[{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Traversable","Accum"],"Accum"]},{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeVar","contents":"a"}]}]}}]}],"tag":"DataConstructorResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[13,1],"name":".spago/foldable-traversable/master/src/Data/Traversable/Accum/Internal.purs","end":[13,51]},"score":0,"packageInfo":{"values":["foldable-traversable"],"tag":"Package"},"name":"stateL","moduleName":"Data.Traversable.Accum.Internal","info":{"values":[{"type":{"tag":"ForAll","contents":["s",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Traversable","Accum","Internal"],"StateL"]},{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Traversable","Accum"],"Accum"]},{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["stater",[{"values":[{"sourceSpan":{"start":[29,1],"name":".spago/foldable-traversable/master/src/Data/Traversable/Accum/Internal.purs","end":[29,45]},"score":0,"packageInfo":{"values":["foldable-traversable"],"tag":"Package"},"name":"StateR","moduleName":"Data.Traversable.Accum.Internal","info":{"values":[{"typeArguments":[["s",null],["a",null]],"dataDeclType":"newtype"}],"tag":"DataResult"},"hashAnchor":"t","comments":null}],"tag":"SearchResult"},{"values":[{"sourceSpan":null,"score":0,"packageInfo":{"values":["foldable-traversable"],"tag":"Package"},"name":"StateR","moduleName":"Data.Traversable.Accum.Internal","info":{"values":[{"arguments":[{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Traversable","Accum"],"Accum"]},{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeVar","contents":"a"}]}]}}]}],"tag":"DataConstructorResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[31,1],"name":".spago/foldable-traversable/master/src/Data/Traversable/Accum/Internal.purs","end":[31,51]},"score":0,"packageInfo":{"values":["foldable-traversable"],"tag":"Package"},"name":"stateR","moduleName":"Data.Traversable.Accum.Internal","info":{"values":[{"type":{"tag":"ForAll","contents":["s",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Traversable","Accum","Internal"],"StateR"]},{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Traversable","Accum"],"Accum"]},{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]],["storepath",[{"values":[{"sourceSpan":{"start":[21,1],"name":"src/Test/Miraculix/FFI.purs","end":[21,38]},"score":0,"packageInfo":{"values":[],"tag":"LocalPackage"},"name":"StorePath","moduleName":"Test.Miraculix.FFI","info":{"values":[{"kind":{"tag":"TypeConstructor","contents":[["Prim"],"Type"]}}],"tag":"ExternDataResult"},"hashAnchor":"t","comments":"Type that describes a path inside the Nix store.\n"}],"tag":"SearchResult"}]],["string",[{"values":[{"sourceSpan":null,"score":0,"packageInfo":{"values":[],"tag":"Builtin"},"name":"String","moduleName":"Prim","info":{"values":[{"kind":{"tag":"TypeConstructor","contents":[["Prim"],"Type"]}}],"tag":"ExternDataResult"},"hashAnchor":"t","comments":"A String. As in JavaScript, String values represent sequences of UTF-16\ncode units, which are not required to form a valid encoding of Unicode\ntext (for example, lone surrogates are permitted).\n\nConstruct values of this type with literals, using double quotes `\"`:\n\n    x = \"hello, world\" :: String\n\nMulti-line string literals are also supported with triple quotes (`\"\"\"`).\n"}],"tag":"SearchResult"}]],["strong",[{"values":[{"sourceSpan":{"start":[28,1],"name":".spago/profunctor/master/src/Data/Profunctor/Strong.purs","end":[30,61]},"score":0,"packageInfo":{"values":["profunctor"],"tag":"Package"},"name":"Strong","moduleName":"Data.Profunctor.Strong","info":{"values":[{"superclasses":[{"constraintClass":[["Data","Profunctor"],"Profunctor"],"constraintArgs":[{"tag":"TypeVar","contents":"p"}]}],"fundeps":[],"arguments":[["p",null]]}],"tag":"TypeClassResult"},"hashAnchor":"t","comments":"The `Strong` class extends `Profunctor` with combinators for working with\nproduct types.\n\n`first` and `second` lift values in a `Profunctor` to act on the first and\nsecond components of a `Tuple`, respectively.\n\nAnother way to think about Strong is to piggyback on the intuition of\ninputs and outputs.  Rewriting the type signature in this light then yields:\n```\nfirst ::  forall input output a. p input output -> p (Tuple input a) (Tuple output a)\nsecond :: forall input output a. p input output -> p (Tuple a input) (Tuple a output)\n```\nIf we specialize the profunctor p to the function arrow, we get the following type\nsignatures, which may look a bit more familiar:\n```\nfirst ::  forall input output a. (input -> output) -> (Tuple input a) -> (Tuple output a)\nsecond :: forall input output a. (input -> output) -> (Tuple a input) -> (Tuple a output)\n```\nSo, when the `profunctor` is `Function` application, `first` essentially applies your function\nto the first element of a `Tuple`, and `second` applies it to the second element (same as `map` would do).\n"}],"tag":"SearchResult"}]],["runexists",[{"values":[{"sourceSpan":{"start":[56,1],"name":".spago/exists/master/src/Data/Exists.purs","end":[56,63]},"score":0,"packageInfo":{"values":["exists"],"tag":"Package"},"name":"runExists","moduleName":"Data.Exists","info":{"values":[{"type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["r",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"r"}]},null]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Exists"],"Exists"]},{"tag":"TypeVar","contents":"f"}]}]},{"tag":"TypeVar","contents":"r"}]}]},null]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"The `runExists` function is used to eliminate a value of type `Exists f`. The rank 2 type ensures\nthat the existentially-quantified type does not escape its scope. Since the function is required\nto work for _any_ type `a`, it will work for the existentially-quantified type.\n\nFor example, we can write a function to obtain the head of a stream by using `runExists` as follows:\n\n```purescript\nhead :: forall a. Stream a -> a\nhead = runExists head'\n  where\n  head' :: forall s. StreamF a s -> a\n  head' (StreamF s f) = snd (f s)\n```\n"}],"tag":"SearchResult"}]],["runtests",[{"values":[{"sourceSpan":{"start":[16,1],"name":"src/Test/Miraculix.purs","end":[16,41]},"score":0,"packageInfo":{"values":[],"tag":"LocalPackage"},"name":"runTests","moduleName":"Test.Miraculix","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Test","Miraculix","TestTree"],"TestTree"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Effect"],"Effect"]},{"tag":"TypeConstructor","contents":[["Test","Miraculix","FFI"],"StorePath"]}]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Run all tests in the test tree\n"}],"tag":"SearchResult"}]]]